"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Avatar } from "@/components/ui/avatar"
import { Sparkles, Send, Menu, Plus, User, Settings, LogOut, X } from "lucide-react"
import { cn } from "@/lib/utils"
import { ThemeToggle } from "@/components/theme-toggle"
import { SettingsDialog } from "@/components/settings-dialog"

type Message = {
  id: string
  content: string
  role: "user" | "assistant"
  timestamp: Date
}

export default function MobileChat() {
  const [input, setInput] = useState("")
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "Hello! How can I help you today?",
      role: "assistant",
      timestamp: new Date(),
    },
  ])
  const [isLoading, setIsLoading] = useState(false)
  const [menuOpen, setMenuOpen] = useState(false)
  const [showSettings, setShowSettings] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      role: "user",
      timestamp: new Date(),
    }
    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: "This is a simulated response. In a real application, this would be generated by an AI model.",
        role: "assistant",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, aiMessage])
      setIsLoading(false)
    }, 1500)
  }

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // Prevent body scroll when menu is open
  useEffect(() => {
    if (menuOpen) {
      document.body.style.overflow = "hidden"
    } else {
      document.body.style.overflow = "unset"
    }
    return () => {
      document.body.style.overflow = "unset"
    }
  }, [menuOpen])

  return (
    <div className="flex h-[100dvh] flex-col bg-tertiary/20 dark:bg-dark-bg">
      {/* Header */}
      <header className="flex h-14 items-center justify-between border-b border-tertiary dark:border-secondary/20 bg-light-bg dark:bg-dark-bg px-3">
        <Button
          variant="ghost"
          size="icon"
          className="text-secondary dark:text-tertiary hover:bg-primary/10"
          onClick={() => setMenuOpen(true)}
        >
          <Menu size={24} />
        </Button>
        <div className="flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-primary animate-pulse" />
          <span className="font-medium text-secondary dark:text-tertiary">AuraChat</span>
        </div>
        <ThemeToggle />
      </header>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-3">
        <div className="space-y-3">
          {messages.map((message, index) => (
            <div
              key={message.id}
              className={cn("flex animate-fade-in", message.role === "user" ? "justify-end" : "justify-start")}
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <div
                className={cn(
                  "max-w-[85%] rounded-2xl px-4 py-2 shadow-sm",
                  message.role === "user"
                    ? "bg-primary text-primary-foreground"
                    : "bg-light-bg dark:bg-muted-dark text-secondary dark:text-tertiary",
                )}
              >
                {message.content}
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="flex justify-start animate-fade-in">
              <div className="max-w-[85%] rounded-2xl bg-light-bg dark:bg-muted-dark p-3 shadow-sm">
                <div className="flex space-x-1">
                  <div className="h-2 w-2 animate-bounce rounded-full bg-primary"></div>
                  <div className="h-2 w-2 animate-bounce rounded-full bg-primary delay-75"></div>
                  <div className="h-2 w-2 animate-bounce rounded-full bg-primary delay-150"></div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Input */}
      <div className="border-t border-tertiary dark:border-secondary/20 bg-light-bg dark:bg-dark-bg p-3 pb-safe">
        <form onSubmit={handleSubmit} className="relative flex items-end gap-2">
          <Textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Message AuraChat..."
            className="min-h-[44px] max-h-32 resize-none rounded-2xl border-tertiary bg-light-bg text-secondary focus:border-primary focus:ring-primary/20 dark:border-secondary/30 dark:bg-dark-bg dark:text-tertiary py-3 pr-12 text-sm"
            onKeyDown={(e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault()
                handleSubmit(e)
              }
            }}
          />
          <Button
            type="submit"
            size="icon"
            className="absolute bottom-1 right-1 h-10 w-10 rounded-xl bg-primary text-primary-foreground hover:bg-primary/90 transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:hover:scale-100"
            disabled={!input.trim() || isLoading}
          >
            <Send size={18} />
          </Button>
        </form>
      </div>

      {/* Slide-out Menu */}
      <div
        className={cn(
          "fixed inset-0 z-50 transform transition-transform duration-300 ease-in-out",
          menuOpen ? "translate-x-0" : "-translate-x-full",
        )}
      >
        {/* Backdrop */}
        <div
          className={cn(
            "absolute inset-0 bg-black/50 backdrop-blur-sm transition-opacity duration-300",
            menuOpen ? "opacity-100" : "opacity-0",
          )}
          onClick={() => setMenuOpen(false)}
        />

        {/* Menu Content */}
        <div className="absolute inset-y-0 left-0 w-72 bg-light-bg dark:bg-dark-bg shadow-xl flex flex-col">
          <div className="flex items-center justify-between p-4 border-b border-tertiary dark:border-secondary/20">
            <div className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-primary" />
              <span className="font-medium text-secondary dark:text-tertiary">AuraChat</span>
            </div>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setMenuOpen(false)}
              className="text-secondary dark:text-tertiary hover:bg-primary/10"
            >
              <X size={24} />
            </Button>
          </div>

          <div className="flex-1 overflow-y-auto">
            <div className="p-3">
              <Button
                className="w-full justify-start gap-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-all duration-200 hover:scale-[1.02]"
                onClick={() => {
                  setMessages([
                    {
                      id: "1",
                      content: "Hello! How can I help you today?",
                      role: "assistant",
                      timestamp: new Date(),
                    },
                  ])
                  setMenuOpen(false)
                }}
              >
                <Plus size={16} />
                New Chat
              </Button>
            </div>

            <div className="px-3 py-2">
              <div className="text-xs font-medium text-secondary/60 dark:text-tertiary/60 mb-2">Today</div>
              <Button
                variant="ghost"
                className="w-full justify-start truncate text-left text-secondary dark:text-tertiary hover:bg-primary/10 mb-1"
              >
                Understanding quantum computing
              </Button>
              <Button
                variant="ghost"
                className="w-full justify-start truncate text-left text-secondary dark:text-tertiary hover:bg-primary/10 mb-1"
              >
                Creative writing prompts
              </Button>
            </div>

            <div className="px-3 py-2">
              <div className="text-xs font-medium text-secondary/60 dark:text-tertiary/60 mb-2">Yesterday</div>
              <Button
                variant="ghost"
                className="w-full justify-start truncate text-left text-secondary dark:text-tertiary hover:bg-primary/10 mb-1"
              >
                Python code examples
              </Button>
              <Button
                variant="ghost"
                className="w-full justify-start truncate text-left text-secondary dark:text-tertiary hover:bg-primary/10 mb-1"
              >
                Travel recommendations
              </Button>
            </div>
          </div>

          <div className="border-t border-tertiary dark:border-secondary/20 p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Avatar className="h-9 w-9 border-2 border-primary transition-all duration-200 hover:scale-105">
                  <User className="h-5 w-5 text-secondary dark:text-tertiary" />
                </Avatar>
                <span className="text-sm font-medium text-secondary dark:text-tertiary">John Doe</span>
              </div>
              <div className="flex gap-1">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => {
                    setShowSettings(true)
                    setMenuOpen(false)
                  }}
                  className="h-8 w-8 text-secondary dark:text-tertiary hover:bg-primary/10 transition-all duration-200 hover:scale-105"
                >
                  <Settings size={16} />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-secondary dark:text-tertiary hover:bg-primary/10 transition-all duration-200 hover:scale-105"
                >
                  <LogOut size={16} />
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Settings Dialog */}
      <SettingsDialog open={showSettings} onOpenChange={setShowSettings} />
    </div>
  )
}

